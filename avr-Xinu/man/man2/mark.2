.\"Modified from man(1) of FreeBSD, the NetBSD mdoc.template, and mdoc.samples.
.\"See Also:
.\"man mdoc.samples for a complete listing of options
.\"man mdoc for the short list of editing options
.\"/usr/share/misc/mdoc.template
.ds release-date February 8, 2011
.ds xinu-platform avr-Xinu
.\"
.Os XINU V7
.Dd \*[release-date] 
.Dt MARK \&2 \*[xinu-platform]
.Sh NAME
mark, unmarked \- set and check initialization marks efficiently
.Sh SYNOPSIS
.nf
.Em #include <mark.h>
.sp
.Em int mark(mk)
.Em MARKER mk;
.sp
.Em int unmarked(mk)
.Em MARKER mk;
.fi
.Sh DESCRIPTION
.Ar Mark
sets
.Ar mk
to "initialized", and records its location in the system.
It returns 0 if the location is already marked, OK if the
marking was successful, and SYSERR if there are too many
marked locations.
.Pp
.Ar Unmarked
checks the contents and location of
.Ar mk
to see if it has been previously marked with the
.Ar mark
procedure.
It returns OK if and only if
.Ar mk
has not been marked, 0 otherwise.
The key is that they work correctly after a reboot, no matter what
was left in the marked locations when the system stopped.
.Pp
Both
.Ar mark
and
.Ar unmarked
operate efficiently (in a few instructions) to correctly determine whether
a location has been marked.
They are most useful for creating self-initializing procedures when the
system will be restarted.
Both the value in
.Ar mk
as well as its location are used to tell if it has been marked.
.Pp
Memory marking can be eliminated from Xinu by removing the definition of
the symbol MEMMARK from the Configuration file.
Self-initializing library routines may require manual initialization
if MEMMARK is disabled (e.g., see BUFFER(3)).
.Sh BUGS
Mark does not verify that the location given lies in the static data
area before marking it; to avoid having the system retain marks for
locations on the stack after procedure exit, do not mark automatic
variables.
