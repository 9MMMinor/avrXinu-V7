.\"Modified from man(1) of FreeBSD, the NetBSD mdoc.template, and mdoc.samples.
.\"See Also:
.\"man mdoc.samples for a complete listing of options
.\"man mdoc for the short list of editing options
.\"/usr/share/misc/mdoc.template
.ds release-date February 8, 2011
.ds xinu-platform avr-Xinu
.\"
.Os XINU V7
.Dd \*[release-date] 
.Dt CREATE \&2 \*[xinu-platform]      \" Program name and manual section number 
.Sh NAME                 \" Section Header - required - don't modify 
.Nm create
.Nd create a new process
.Sh SYNOPSIS
.In avr-Xinu.h
.Ft int
.Fo create
.Fa "char *caddr"
.Fa "int ssize"
.Fa "int prio"
.Fa "char *name"
.Fa "int nargs"
.Fa "[int argument]..."
.Fc
.Sh DESCRIPTION
.Ar Create
creates a new process that will begin execution at location
.Ar caddr,
with a stack of
.Ar ssize
bytes, initial priority
.Ar prio,
and identifying name
.Ar name.
.Ar Caddr
should be the address of a procedure or main program.
If the creation is successful, the (nonnegative) process id of
the new process is returned to the caller.
The created process is left in the suspended state; it will
not begin execution until started by a resume command.
If the arguments are incorrect, or if there are no free process
slots, the value SYSERR is returned.
The new process has its own stack, but shares global data
with other processes according to the scope rules of C.
If the procedure attempts to return, its
process will be terminated (see KILL(2)).
.Pp
The caller can pass a variable number of arguments to the created
process.
The integer
.Ar nargs
specifies how many integer argument values follow.
When the created process is resumed, it is called with two arguments.
The first argument,
.Ar argc,
is the number of arguments the process was invoked with; the second (
.Ar argv,
for argument vector) is an array of pointers to the
.Ar Nargs
arguments.
.Sh EXAMPLES
.Bd -literal
#include <avr-Xinu.h>

int A(int argc, int *argv);

int Xinu_main(int argc, int *argv)
{
    int i, pidA;

    printf("Xinu_main, %d arguments:\\n", argc);
    for (i = 0; i < argc; i++)
        printf(" %d", argv[i]);
    printf("\\n");

    resume(pidA = create(A, 500, 22, "A_Thread", 2, 99, 0xce));

    return 0;
}

int A(int nargs, int *argv)
{
    int i;

    printf("A, %d arguments:\\n", nargs);
    for (i = 0; i < nargs; i++)
        printf(" %d", argv[i]);
    printf("\\n");

    return 0;
}
.Ed
.Sh SEE ALSO
.Xr kill 2
