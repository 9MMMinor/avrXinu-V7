<!-- Creator     : groff version 1.19.2 -->
<!-- CreationDate: Tue Dec 28 14:52:29 2010 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="Content-Style" content="text/css">
<style type="text/css">
       p     { margin-top: 0; margin-bottom: 0; }
       pre   { margin-top: 0; margin-bottom: 0; }
       table { margin-top: 0; margin-bottom: 0; }
</style>
<title>Xinu Programmer&rsquo;s Manual Version 6b</title>

</head>
<body>

<h1 align=center>Xinu Programmer&rsquo;s Manual Version 6b</h1>

<a href="#How to Use Xinu">How to Use Xinu</a><br>
<a href="#An Example">An Example</a><br>

<hr>



<p align=center style="margin-top: 1em" valign="top"><i>(Xinu
Is Not Unix)</i></p>

<p align=center style="margin-top: 1em" valign="top">June
1983</p>

<p style="margin-top: 1em" valign="top">This manual
contains a description of the Xinu software. It has been
divided into four sections. The introduction in section 0
describes how to use the Xinu software to compile, download,
execute, and debug a C program. Section 0 also contains a
set of informal implementation notes that give the flavor of
Xinu. Section 1 gives the details and arguments of
cross-development commands available on the host that
cross-compile, cross-assemble, cross-load, download, upload,
and analyze programs. Section 2 describes Xinu system
procedures that programs call to invoke operating system
services. Section 3 describes procedures available from the
standard libraries. From the programmer&rsquo;s point of
view, there is little distinction between library routines
and system calls.</p>

<p style="margin-top: 1em" valign="top">As in the UNIX
manual, each page describes a command, system call or
library routine; section numbers appear in the page header
as &quot;(digit)&quot; following the name of the program;
within a section all pages are arranged in alphabetical
order. References have the same form as headers (e.g.,
&quot;getc(2)&quot; refers to the page for &quot;getc&quot;
in section 2).</p>

<p align=center style="margin-top: 1em" valign="top"><b>A
Short Introduction To Xinu and the Cross-Development
Software</b></p>

<a name="How to Use Xinu"></a>
<h2>How to Use Xinu</h2>



<p style="margin-top: 1em" valign="top"><i>Architecture.</i>
Xinu comes in two parts: a cross-development environment
that runs on the host machine (usually a Digital Equipment
Corp. VAX), and an independent system that runs on the
microcomputer (usually a Digital Equipment Corporation LSI
11/02). The microcomputer is connected to the host over an
asynchronous serial line like those used to connect
terminals. From the point of view of the host, the
microcomputer is simply another device that transmits and
receives characters; from the point of view of the micro,
the host is merely a console terminal that transmits and
receives characters.</p>

<p style="margin-top: 1em" valign="top"><i>Overview.</i> To
run a program under Xinu, you create the source file on the
host machine, and invoke cross-development software to
compile and load the program along with the Xinu system.
Once a complete memory image has been produced, it can be
downloaded onto the microcomputer where it executes
independent of the host. During execution, you invoke a
program on the host that captures characters emitted by the
micro and displays them on the terminal screen, and sends
characters typed at the keyboard to the micro. Thus, your
terminal on the host appears to be connected directly to the
micro. If the micro crashes, it can be restarted without
downloading (provided the crash did not destroy the program
in memory). To help debug severe crashes, the contents of
memory on the micro can be uploaded to a file on the host
where a post-mortem program can analyze the state and report
problems.</p>


<p style="margin-top: 1em" valign="top"><i>Cross-Development
commands.</i> The cross-development system contains a C
compiler, linking loader, downloader, uploader, and
post-mortem debugger as well as a few miscellaneous
commands. The details can be found in section 1 of this
manual. These commands probably reside in the Xinu
&quot;bin&quot; directory on your system; the directory name
must be part of your PATH for you to execute them. If they
are not in directory /usr/Xinu/bin, consult whoever
installed Xinu to find out the bin directory name and add it
to your path.</p>

<p style="margin-top: 1em" valign="top"><i>Compiling
programs.</i> The command <i>cc11</i> works like the UNIX
<i>cc</i> command. It invokes the C cross-compiler,
cross-assember, and cross-loader to translate C programs
into a memory image. Like <i>cc</i>, the actions of
<i>cc11</i> depend on the file names passed to it as
arguments -- names ending in &quot;.c&quot; are assumed to
be C programs, those ending in &quot;.s&quot; are assumed to
be assember programs, and those ending in &quot;.o&quot; are
assumed to be previoulsy compiled object programs. Unless
you specify otherwise, <i>cc11</i> compiles C programs,
assembles assembler programs, and loads object programs to
produce a memory image in file <i>a.out</i>. Normally, the
memory image contains the Xinu operating system along with
your program (you can ask <i>cc11</i> to leave out the
operating system and just prepare a &quot;stand-alone&quot;
program).</p>


<p style="margin-top: 1em" valign="top"><i>Downloading.</i>
Command <i>download</i> reads file <i>a.out</i>, and loads
the memory image into the microcomputer (it will look for
the memory image in a different file if you instruct it to
do so). Usually, <i>download</i> is invoked with an argument
&quot;-a5&quot; that causes the microcomputer to delay for
five seconds before starting execution of the downloaded
program.</p>

<p style="margin-top: 1em" valign="top"><i>Interacting with
the Micro.</i> The microcomputer on which Xinu runs is
attached to the host like a peripheral device. The program
<i>odt</i> &quot;connects&quot; your terminal to the
microcomputer by relaying characters between the terminal
and the device. Characters that arrive from the micro are
sent to your terminal, while characters typed on your
keyboard are sent to the micro. <i>Odt</i> can be invoked at
any time, but it is most often used just after a
<i>download</i> so you can see the output of the program as
it runs. <i>Odt</i> will halt the microcomputer for you by
&quot;breaking&quot; the console line if you type the
2-character sequence backslash (\) followed by null
(CONTROL-@). To proceed again, type uppercase-P (see the LSI
11 manual for more information on the &quot;odt&quot;
mode).</p>

<p style="margin-top: 1em" valign="top"><i>Debugging a
crash.</i> If the program running on the micro crashes, the
cause of trouble may not be easy to spot. Help is available
from a post-mortem debugger, <i>pm</i>. You must first
execute command <i>upload</i> to copy the complete memory
image from the micro into a file on the host. By default,
the image file is named <i>core11</i>. After the
<i>core11</i> file has been created, run command <i>pm</i>
to cull through it and print out the system status.
<i>Pm</i> uses both <i>core11</i> and <i>a.out</i> to
diagnose the problem (as usual, the actual file names can be
changed if you don&rsquo;t happen to like them).</p>

<a name="An Example"></a>
<h2>An Example</h2>


<p style="margin-top: 1em" valign="top"><i>Create a C
program.</i> For example, here is a C program that prints
the string &quot;Hello world.&quot; on the console terminal
and exits (<i>Printf</i> is a system (library) procedure
that prints formatted strings on the console; other system
commands are described in sections 2 and 3 of this
manual):</p>

<p style="margin-left:34%; margin-top: 1em">/* example C
program in file example.c */ <br>
main() <br>
{</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="31%"></td>
<td width="69%">


<p valign="top">printf(&quot;Hello world.\n&quot;);</p></td>
</table>

<p style="margin-left:34%;">}</p>

<p style="margin-top: 1em" valign="top"><i>Compile and
Download.</i> Cross-compile the program, download it onto
the micro, and connect your terminal to the micro with the
following commands:</p>

<p style="margin-left:34%; margin-top: 1em">cc11 example.c
<br>
download -a5 <br>
odt</p>

<p style="margin-top: 1em" valign="top">The cross-compiler
will compile the C program, and load it along with the Xinu
system, leaving file <i>a.out</i> in your current directory.
The downloader will copy the image from <i>a.out</i> into
the micro and start it executing (after a delay of five
seconds). During downloading, you will see a count of the
bytes remaining as blocks are transferred. Finally,
<i>odt</i> will connect your terminal to the micro (the
5-second delay leaves time for the VAX to start <i>odt</i>).
When the micro begins execution you will see a few Xinu
system startup messages followed by the program output. When
all of your processes complete (in this case, when the
single program terminates), you will see a system
termination message. The output is:</p>

<p style="margin-left:34%; margin-top: 1em">Xinu Version
6.09b 3/1/83 <br>
57346 real mem <br>
21268 avail mem <br>
clock enabled</p>

<p style="margin-left:34%; margin-top: 1em">Hello
world.</p>

<p style="margin-left:34%; margin-top: 1em">All user
processes have completed.</p>

<p style="margin-top: 1em" valign="top"><i>Re-run the
program.</i> To re-run the program without downloading the
micro again, type:</p>

<p style="margin-left:34%; margin-top: 1em">\CONTROL-@ <br>
1000G</p>

<p style="margin-top: 1em" valign="top">The 2-character
sequence backslash (\) null (control-@) causes <i>odt</i> to
halt the LSI 11 and place it in &quot;ODT&quot; mode. The
LSI 11 responds with an at-sign prompt. The sequence
&quot;1000G&quot; starts the machine executing at location
1000 (octal). To get out of <i>odt</i>, kill the process by
typing the &quot;DELETE&quot; key. Note that killing
<i>odt</i> does not stop the micro -- it merely disconnects
your terminal.</p>

<p style="margin-top: 1em" valign="top"><i>Upload the
memory.</i> You may want to see what processes are (were)
running. To retrieve the memory image and analyze it, run
the commands:</p>

<p style="margin-left:34%; margin-top: 1em">upload <br>
pm</p>

<p style="margin-top: 1em" valign="top">Warning:
<i>upload</i> destroys the contents of memory on the micro
as it executes, so the micro cannot be restarted again after
uploading. Also note that if you interrupt (i.e. kill) the
uploader and then restart it, the image it retrieves will be
incorrect.</p>

<p style="margin-top: 1em" valign="top"><i>Interpreting pm.
Pm</i> reports things like whether the program text has been
changed and the status of each process. If the output from
<i>pm</i> seems unreasonable, check for the following common
errors. If significant portions of the program have been
changed, it may mean a stack overflow occurred; totally
meaningless process information often indicate that the
overflow extended into the process table. Having only one or
two bad process states in an otherwise meaningful set may
indicate that the context switch ended up with no ready or
current processes; this only happens if you modify the
system code or add your own device driver. When
experimenting with device drivers, look carefully at the
status of the null process after a crash -- if you find it
sleeping, waiting, receiving, or suspended then you probably
have a lower-half driver routine that removes the null
process from the current/ready lists.</p>

<p style="margin-top: 1em" valign="top"><i>System
Termination.</i> Xinu may not always print the system
termination message even if all your processes exit, because
it interprets the term &quot;user process&quot; to mean
&quot;all processes except the null process.&quot; This can
be confusing because the network software starts processes
that never terminate (they continue forwarding frames even
if the CPU is otherwise idle). Also remember that the tty
driver will continue to echo characters even if there are no
processes running to consume them.</p>

<p style="margin-top: 1em" valign="top"><i>Hints on
restarting.</i> The LSI 11 ODT command 1000G sets the
program counter to 1000 and starts execution with interrupts
<i>enabled</i>. Xinu disables interrupts immediately after
it starts executing to avoid being interrupted before the
system is ready. If an interrupt occurs before the LSI 11
can execute the first instructon, it may cause the system to
crash (ungracefully). If your processor gives you trouble
with the &quot;G&quot; command, then type the following
three lines to restart Xinu:</p>

<p style="margin-left:34%; margin-top: 1em">RS/xxxxxx 340
<br>
R7/xxxxxx 1000 <br>
P</p>

<p style="margin-top: 1em" valign="top">The LSI 11 will
print octal values in place of xxxxxx. Note: no carriage
return is used after the &quot;P&quot; command (consult the
LSI 11 manual for more information).</p>


<p align=center style="margin-top: 1em" valign="top"><b>Xinu
Implementation Notes</b> <br>
Updated 1/82, 3/82, 11/82.</p>

<p style="margin-top: 1em" valign="top">These are the notes
kept during implementation; they are not designed as an
accurate introduction to Xinu. In particular, deferred
operations implemented with <i>pmark</i> have disappeared
from the book version even though they remain in version
5.</p>

<p style="margin-top: 1em" valign="top">Some quick
ideas:</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">There are multiple
processes.</p> </td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">A process is known
by its process id.</p></td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">The process id is
an index into the process table.</p></td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">There are counting
semaphores.</p> </td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">A semaphore is
known by its index in the semaphore table.</p></td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">There is a line
time clock.</p></td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">The system
schedules processes based on priority.</p></td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">The system supports
I/O.</p> </td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">For tty I/O
characters are queued on input and output. The normal mode
includes echoing, erasing backspace, etc.</p></td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">There is a
frame-level data link communications package to make a ring
of LSI 11&rsquo;s.</p></td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">There is a file
system that supports concurrent growth of files without
preallocation; it has only a single-level directory
sturcture.</p> </td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">There is a one-word
message passing mechanism.</p></td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">There is support
for self-initializing routines (memory marking) that makes
the system serially reusable without requiring the kernel to
explicitly call initialization routines.</p></td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">Processes can
create processes, kill processes, suspend processes, restart
processes, and change the priority of processes.</p></td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">There is no real
memory management, but there are primitives for acquiring
and returning memory from the global pool, and a way to
suballocate smaller pools of fixed-size buffers.</p></td>
<tr valign="top" align="left">
<td width="2%">


<p style="margin-top: 1em" valign="top">-</p></td>
<td width="4%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">There is a
configuration program, config, to generate a Xinu system
according to specifications given.</p></td>
</table>

<p style="margin-top: 1em" valign="top">Discussion of
implementation:</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="4%">


<p style="margin-top: 1em" valign="top">0.</p></td>
<td width="2%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">Files. The system
sources are organized as a set of procedures. For the most
part, there is a file for each system call (e.g., chprio.c
for the system call chprio). In addition to the system call
procedures, a file may contain utility functions needed by
that system call. Files which do not correspond to system
calls are:</p></td>
</table>


<p style="margin-left:20%; margin-top: 1em">Configuration</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">The file of device and constant information
as edited by the user to describe the hardware; the config
program takes this file and produces conf.c and conf.h
files.</p> </td>
</table>

<p style="margin-left:20%; margin-top: 1em">conf.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">Generated constants including I/O and size
constants; do not edit directly.</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">conf.c</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">Generated file of initialized variables; do
not edit directly.</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">kernel.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="87%">


<p valign="top">General symbolic constants; misc defined
macros.</p> </td>
<td width="2%">
</td>
</table>

<p style="margin-left:20%; margin-top: 1em">proc.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">Process table entry structure declaration;
state constants.</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">sem.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">Semaphore table entry structure
declaration; semaphore constants.</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">io.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="64%">


<p valign="top">General user-level I/O definitions.</p></td>
<td width="25%">
</td>
</table>

<p style="margin-left:20%; margin-top: 1em">slu.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">Serial Line Unit CSR layout; I/O constants
for slu&rsquo;s.</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">tty.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">tty line discipline control block, buffers,
excluding sizes.</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">dlc.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">line discipline control block for
asynchronous device used as network interface.</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">disk.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="47%">


<p valign="top">disk driver control block.</p></td>
<td width="42%">
</td>
</table>

<p style="margin-left:20%; margin-top: 1em">dtc.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">Digital Technology Corp. SASI disk
interface hardware register layouts.</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">xebec.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">Xebec Corp. SASI disk controller register
layouts.</p> </td>
</table>

<p style="margin-left:20%; margin-top: 1em">frame.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="78%">


<p valign="top">Xinu ring network frame format
definitions.</p> </td>
<td width="11%">
</td>
</table>

<p style="margin-left:20%; margin-top: 1em">bufpool.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="60%">


<p valign="top">Buffer pool constants and format.</p></td>
<td width="29%">
</td>
</table>

<p style="margin-left:20%; margin-top: 1em">mark.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="62%">


<p valign="top">Memory marking table declarations.</p></td>
<td width="27%">
</td>
</table>

<p style="margin-left:20%; margin-top: 1em">mem.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="87%">


<p valign="top">Memory management free list format
declarations.</p> </td>
<td width="2%">
</td>
</table>

<p style="margin-left:20%; margin-top: 1em">ports.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">Definitions for communications ports
(queued interprocess rendevous points).</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">sleep.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="75%">


<p valign="top">Definitions for real-time delay
software.</p> </td>
<td width="14%">
</td>
</table>

<p style="margin-left:20%; margin-top: 1em">dir.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="56%">


<p valign="top">Layout of disk directory block.</p></td>
<td width="33%">
</td>
</table>


<p style="margin-left:20%; margin-top: 1em">iblock.h&quot;</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="58%">


<p valign="top">Layout of index block (i-block).</p></td>
<td width="31%">
</td>
</table>

<p style="margin-left:20%; margin-top: 1em">file.h</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="6%"></td>
<td width="5%"></td>
<td width="89%">


<p valign="top">Definitions of variables and constants used
by the local file system routines.</p></td>
<tr valign="top" align="left">
<td width="6%"></td>
<td width="5%">


<p style="margin-top: 1em" valign="top">q.h</p></td>
<td width="89%">


<p style="margin-top: 1em" valign="top">q data structure
declaration (see below); defined macros for q
predicates.</p> </td>
</table>

<p style="margin-left:20%; margin-top: 1em">queue.c</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="44%">


<p valign="top">q manipulation routines.</p></td>
<td width="45%">
</td>
</table>

<p style="margin-left:20%; margin-top: 1em">resched.c</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">Almost the inner most routine
(rescheduler). It selects the next process to run from the
ready queue and fixes up the state. Calls ctxsw to switch
contexts.</p> </td>
</table>

<p style="margin-left:20%; margin-top: 1em">cxtsw.s</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">The routine that actually changes the
executing process into another one. A very small piece of
assembler code with only one trick: when a process is saved,
the execution address at which it restarts is actually the
instruction following the call to ctxsw.</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">lowcore.s</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">The loaded version of the low part of
memory (interrupt vectors). All interrupt vectors are
initialized by the loader to point to panic routines, and
overwritten for valid devices at startup.</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">ioint.s</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="47%">


<p valign="top">I/O interrupt dispatchers.</p></td>
<td width="42%">
</td>
</table>

<p style="margin-left:20%; margin-top: 1em">startup.s</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">Actual entry point (start) with code to set
up C run-time environment and call high-level
initialization.</p> </td>
</table>


<p style="margin-left:20%; margin-top: 1em">initialize.c</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">All external (global) variables, the null
process (process 0, see below), and the high-level system
initialization routine (e.g., to craft the process table
entry for process 0).</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">userret.c</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="89%">


<p valign="top">The routine to which user processes return
(i.e. exit) if they ever do. Care should be taken so that
userret never exits; it must kill the process that runs it
because there is no legal return frame on the stack.</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">sizmem.s</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="4%"></td>
<td width="2%"></td>
<td width="94%">


<p valign="top">Utility procedure to size main memory.</p></td>
<tr valign="top" align="left">
<td width="4%">


<p>1.</p></td>
<td width="2%"></td>
<td width="94%">


<p>Process states. Each process has a state given by the
pstate field in the process table entry. The state values
are given by symbolic constants PRxxxx. PRFREE means that
the process entry is unused. PRREADY means that the process
is linked into the ready list and is eligible for the CPU.
PRWAIT means that the process is waiting on a semaphore
(given by psem). PRSUSP means that the process is in
hibernation; it is not on any list. PRSLEEP means that the
process is in the queue of sleeping processes waiting to be
awakened. PRCURR means that the process is (the only one)
currently running. The currently running process is NOT on
the ready list. In addition to the actual state, there is a
&quot;mark&quot; field (pmark) which indicates pending state
changes. PMDEAD indicates that the process has been killed
and should be removed as soon as it reaches the ready queue.
PMSUSP indicates that the process has been suspended and
should move to the suspended state as soon as it reaches the
ready queue. PMNONE indicates no pending action.</p></td>
<tr valign="top" align="left">
<td width="4%">


<p style="margin-top: 1em" valign="top">2.</p></td>
<td width="2%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">Semaphores.
Semaphores reside in the array semaph. Each entry in the
array corresponds to a semaphore and has a count (scount),
and state (sstate). The state is SFREE if the semaphore slot
is unassigned, SUSED if the semaphore is in use. If the
count is -p then the sqhead and sqtail fields point to a
FIFO queue of p processes waiting for the semaphore. If the
count is nonnegative p then no processes are waiting. More
about the head and tail pointers below.</p></td>
<tr valign="top" align="left">
<td width="4%">


<p style="margin-top: 1em" valign="top">3.</p></td>
<td width="2%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">Suspension.
Suspended processes are forbidden from using the CPU. They
may remain on semaphore/sleep queues until they are to be
moved to the ready queue. A call to ready(p), where p has
been marked suspended, will NOT place it on the ready queue.
It will merely result in p being placed in the suspended
state. Suspending a process that is already on the ready
queue will remove it. Suspending the current processes
forces it to give up the CPU.</p></td>
<tr valign="top" align="left">
<td width="4%">


<p style="margin-top: 1em" valign="top">4.</p></td>
<td width="2%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">Sleeping. When a
process calls sleep(n) it will be delayed n seconds. This is
achieved by placing the process on a queue of jobs ordered
by wakeup time and relinquishing the CPU. Every 60th of a
second, an external line-time clock will interrupt the CPU
and cause a clock interrupt routine to be called. To avoid
extra overhead, 5 such interrupts are ignored before one is
processed. Thus, the granularity of clock counts is 1/10 of
a second. The interrupt handler maintains a clock and moves
processes back to the ready queue when their wakeup time has
been reached. Notice that a process may put itself, but no
one else, to sleep.</p></td>
<tr valign="top" align="left">
<td width="4%">


<p style="margin-top: 1em" valign="top">5.</p></td>
<td width="2%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">Queues and ordered
lists. There is one data structure for all heads, tails, and
elements of queues or lists of processes: q[]. The first
NPROC entries in q (0 to NPROC-1) correspond to the NPROC
processes. If one wants to link process i onto a queue or
list, then one uses q[i].qnext and q[i].qprev as the forward
and backward pointers.</p></td>
</table>

<p style="margin-left:20%; margin-top: 1em">The remaining
entries in q are used for the heads and tails of lists. The
integer nextqueue always points to the next available entry
in q to assign. When initialize builds the heads and tails
of various lists, it assigns entries in q sequentially.
Thus, the sqhead and sqtail fields of a semaphore are really
the indices of the head and tail of the list in q. The
advantage of keeping all heads and tails in the same data
structure is that enqueueing, dequeuing, testing for
empty/nonempty, and removing from the middle (eg., when a
process is killed) are all handled by a small set of simple
procedures (files queue.c and q.h). An empty queue has the
head and tail pointing to each other. Since all real items
have index less than NPROC, testing whether a list is empty
becomes trivial. In addition to FIFO queues, q also contains
ordered lists based on an integer kept in the qkey field.
For example, processes are inserted in the ready list (head
at position q[rdylist]) based on their priority. They are
inserted in the sleep list based on wakeup time. Ordered
lists are always in ascending order with the inserted item
stuck in BEFORE those with an equal key. Thus, processes are
removed from the ready list from the tail to get the highest
priority process. Also, processes of equal priority are
scheduled round robin. Since the sleep queues are serviced
from the smallest to largest keys, items are removed from
the head of the queue (equal keys do not matter for
sleeps).</p>

<table width="100%" border=0 rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="4%">


<p style="margin-top: 1em" valign="top">6.</p></td>
<td width="2%"></td>
<td width="94%">


<p style="margin-top: 1em" valign="top">Process 0. Process
0 is a null process that is always available to run or is
running. Care must be taken so that process 0 never executes
code that could cause its suspension (e.g. it cannot wait
for a semaphore). Since Process 0 may be running during
interrupts, this means that interrupt code may never wait
for a semaphore. Process 0 initializes the system, creates
the first user process, starts it executing the main
program, and goes into an infinite loop waiting until an
interrupt. Because its priority is lower than that of any
other process, the null process loop executes only when no
other process is ready. It uses a pause instruction while
waiting to avoid taking bus cycles just in case dma devices
are running.</p></td>
 </table>
<hr>
</body>
</html>
