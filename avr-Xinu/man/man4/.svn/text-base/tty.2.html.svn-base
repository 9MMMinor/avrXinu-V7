<!-- Creator     : groff version 1.19.2 -->
<!-- CreationDate: Sun Feb  6 21:17:11 2011 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="Content-Style" content="text/css">
<style type="text/css">
       p     { margin-top: 0; margin-bottom: 0; }
       pre   { margin-top: 0; margin-bottom: 0; }
       table { margin-top: 0; margin-bottom: 0; }
</style>
<title></title>
</head>
<body>

<hr>


<p valign="top">TTY(4) avr-Xinu TTY(4)</p>

<p style="margin-top: 1em" valign="top"><b>NAME</b></p>

<p style="margin-left:8%;"><b>tty</b> &mdash;
general-purpose terminal I/O device driver (type tty)</p>


<p style="margin-top: 1em" valign="top"><b>SYNOPSIS</b></p>

<p style="margin-left:8%;"><b>#include &lt;USART.h&gt; <br>
#include &lt;tty.h&gt;</b></p>

<p style="margin-left:8%; margin-top: 1em"><i>int</i></p>


<p style="margin-left:14%;"><b>read</b>(<i>int&nbsp;device</i>,
<i>char&nbsp;*buffer</i>, <i>int&nbsp;length</i>);</p>

<p style="margin-left:8%; margin-top: 1em"><i>int</i></p>


<p style="margin-left:14%;"><b>write</b>(<i>int&nbsp;device</i>,
<i>char&nbsp;*buffer</i>, <i>int&nbsp;length</i>);</p>

<p style="margin-left:8%; margin-top: 1em"><i>int</i></p>

<p style="margin-left:14%;"><b>open</b>(<i>device</i>,
<i>char&nbsp;*name</i>, <i>char&nbsp;*mode</i>);</p>


<p style="margin-left:14%; margin-top: 1em"><b>close</b>(<i>device</i>);</p>


<p style="margin-left:14%; margin-top: 1em"><b>control</b>(<i>device</i>,
<i>function</i>, <i>arg1</i>, <i>arg2</i>);</p>


<p style="margin-left:14%; margin-top: 1em"><b>init</b>(<i>device</i>);</p>


<p style="margin-top: 1em" valign="top"><b>DESCRIPTION</b></p>

<p style="margin-left:8%;">The <i>tty</i> device driver
provides input and output for a full-duplex ascii terminal
device. On most Xinu systems, device <i>CONSOLE</i> is of
type tty.</p>

<p style="margin-left:8%; margin-top: 1em">Implemented on
the built in USART, the driver expects one interrupt per
character on both input and output.</p>

<p style="margin-left:8%; margin-top: 1em">The <i>tty</i>
driver operates in one of three modes, with switching
between the modes determined dynamically. In <i>raw
mode</i>, it passes incoming characters to the reading
process without further processing. In <i>cbreak mode</i>,
the driver honors XON-XOFF flow control, character echo, and
mapping between carriage return and line feed. In <i>cooked
mode</i> the driver behaves like cbreak mode, but also
handles line editing with backspace and line kill keys.
Characters are processed according to the driver mode when
they arrive, and are placed in a queue from which upper-half
routines extract them. Echoing, presentation of control
characters, and editing are controlled by several fields in
the driver control structure, and may be changed
dynamically.</p>

<p style="margin-left:8%; margin-top: 1em">The upper-half
routines behave as follows:</p>


<p style="margin-top: 1em" valign="top"><b>read</b>(<i>device</i>,
<i>buffer</i>, <i>length</i>)</p>

<p style="margin-left:35%;">Reads up to one line into the
user&rsquo;s <i>buffer</i>, stopping on an END-OF-FILE or
NEWLINE character, or after <i>length</i> characters have
been supplied. As a special case, if <i>length</i> is zero,
the driver reads whatever characters are available in the
input buffer (possibly zero). In cooked mode, <i>read</i>
blocks until a line has been typed.</p>


<p style="margin-top: 1em" valign="top"><b>write</b>(<i>device</i>,
<i>buffer</i>, <i>length</i>)</p>

<p style="margin-left:35%;">Writes <i>length</i> characters
from the user&rsquo;s <i>buffer</i>, mapping CARRIAGE RETURN
to NEWLINE as specified by field <i>ocrlf</i> of the driver
control structure. Write may block if the output exceeds the
currently available buffer space.</p>


<p style="margin-top: 1em" valign="top"><b>getc</b>(<i>device</i>)</p>

<p style="margin-left:35%; margin-top: 1em">Reads a single
character and returns it as the function value.</p>


<p style="margin-top: 1em" valign="top"><b>putc</b>(<i>device</i>,
<i>char</i>)</p>

<p style="margin-left:35%;">Writes character
<i>char</i>.</p>

<p style="margin-top: 1em" valign="top"><b>open</b>(<i>int
device</i>, <i>char *name</i>, <i>char *mode</i>)</p>

<p style="margin-left:35%;">This routine is not normally
used to open tty devices, but is provided so that automatic
calls to open do not fail. It returns <i>device</i> when
called with a null name or SYSERR otherwise.</p>


<p style="margin-top: 1em" valign="top"><b>close</b>(<i>device</i>)</p>

<p style="margin-left:35%; margin-top: 1em">Returns
<i>OK</i> without taking any action.</p>


<p style="margin-top: 1em" valign="top"><b>init</b>(<i>device</i>)</p>

<p style="margin-left:35%; margin-top: 1em">Initializes the
driver. Note: for historical reasons, device <i>CONSOLE</i>
is initialized to cooked mode with echo, visual control
character printing, and line editing enabled, while other
devices are initialized to raw mode.</p>


<p style="margin-top: 1em" valign="top"><b>control</b>(<i>device</i>,
<i>function</i>)</p>

<p style="margin-left:35%;">Controls the driver and
provides non-transfer operations. The valid functions
are:</p>

<p style="margin-top: 1em" valign="top">TCNEXTC &minus;
lookahead one character without reading it.</p>

<p style="margin-top: 1em" valign="top">TCMODER &minus;
change the driver to raw mode.</p>

<p style="margin-top: 1em" valign="top">TCMODEC &minus;
change the driver to cooked mode.</p>

<p style="margin-top: 1em" valign="top">TCMODEK &minus;
change the driver to cbreak mode.</p>

<p style="margin-top: 1em" valign="top">TCECHO &minus; turn
on character echo.</p>

<p style="margin-top: 1em" valign="top">TCNOECHO &minus;
turn off character echo.</p>

<p style="margin-top: 1em" valign="top">TCCRLF &minus; turn
on NEWLINE and RETURN echo on input.</p>

<p style="margin-top: 1em" valign="top">TCNOCRLF &minus;
turn off NEWLINE and RETURN echo on input.</p>

<p style="margin-top: 1em" valign="top">TCICHARS &minus;
return a count of characters in the input buffer.</p>


<p style="margin-top: 1em" valign="top"><b>DIAGNOSTICS</b></p>

<p style="margin-left:8%;">Character errors are reported by
turning on the high-order bit of the character.</p>

<p style="margin-top: 1em" valign="top"><b>NOTES</b></p>

<p style="margin-left:8%;">The version 6 driver used buffer
counts as exact requests; version 7 is line oriented. Error
reporting should be improved.</p>

<p valign="top">XINU V7 February&nbsp;8, 2011 XINU V7</p></table>
<hr>
</body>
</html>
