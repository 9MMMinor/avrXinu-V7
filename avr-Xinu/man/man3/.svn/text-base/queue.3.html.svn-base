<!-- Creator     : groff version 1.19.2 -->
<!-- CreationDate: Tue Dec 28 14:52:33 2010 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="Content-Style" content="text/css">
<style type="text/css">
       p     { margin-top: 0; margin-bottom: 0; }
       pre   { margin-top: 0; margin-bottom: 0; }
       table { margin-top: 0; margin-bottom: 0; }
</style>
<title></title>
</head>
<body>

<hr>


<p style="margin-top: 1em" valign="top">Printed 12/28/2010
1</p>

<p style="margin-top: 1em" valign="top">QUEUE(3) Xinu
Programmer&rsquo;s Manual QUEUE(3)</p>


<p style="margin-left:8%; margin-top: 1em"><b><small>NAME</small></b>
<br>
queue - q-structure predicates and list manipulation
procedures</p>


<p style="margin-left:8%; margin-top: 1em"><b><small>SYNOPSIS</small>
<br>
#include &lt;q.h&gt;</b></p>

<p style="margin-left:8%; margin-top: 1em"><b>int
enqueue(proc, tail) <br>
int dequeue(proc) <br>
int firstid(head) <br>
int firstkey(head) <br>
int getfirst(head) <br>
int getlast(tail) <br>
int insert(proc, head, key) <br>
int insertd(proc, head, key) <br>
Bool isempty(head) <br>
int lastkey(tail) <br>
Bool nonempty(head)</b></p>

<p style="margin-left:8%; margin-top: 1em"><b>int head,
tail; <br>
int proc; <br>
int key;</b></p>


<p style="margin-left:8%; margin-top: 1em"><b><small>DESCRIPTION</small></b>
<br>
The <i>q</i> structure holds doubly-linked lists of
processes, including lists of processes that are ready,
sleeping, and waiting on a semaphore. These routines
manipulate lists in the <i>q</i> structure as follows.
<b>enqueue</b></p>

<p style="margin-left:15%;">Add a process to a FIFO list
given the process id in argument <i>proc</i> and the
<i>q</i> index of the tail of the list in argument
<i>tail</i>. <i>Enqueue</i> returns argument <i>proc</i> to
its caller. <b>dequeue</b> <br>
Remove a process from a list given the process id. The list
on which the process is found need not be specified because
it can be determined from the <i>q</i> structure.
<i>Dequeue</i> will remove a process from both FIFO and
ordered lists. It returns its argument to the caller.
<b>firstid</b> <br>
Return the process id of the first process on a list given
the <i>q</i> index of the list head in argument <i>head</i>.
<b>firstkey</b> <br>
Return the integer key associated with the first entry on a
list given the <i>q</i> index of the list in argument
<i>head</i>. <b>getfirst</b> <br>
Remove the first process from a list and return its process
id given the <i>q</i> index of the head of the list in
argument <i>head</i>. <i>Getfirst</i> returns EMPTY if the
list is empty, and a process id otherwise. <b>getlast</b>
<br>
Remove the last process on a list and return its process id
given the <i>q</i> index of the tail of the list in argument
<i>tail</i>. <i>Getlast</i> returns EMPTY if the list is
empty, and a process id otherwise. <b>insert</b> <br>
Insert a process into an ordered list given the process id
in argument <i>proc</i>, the <i>q</i> index of the head of
the list in argument <i>head</i>, and an integer key for the
process in argument <i>key</i>. Ordered lists are always
ordered by increasing key values. <i>Insert</i> returns OK.
<b>insertd</b> <br>
Insert a process in a delta list given the process id in
argument <i>proc</i>, the <i>q</i> index of the head of the
list in argument <i>head</i>, and an integer key in argument
<i>key</i>. <i>Insertd</i> returns OK. <b>isempty</b> <br>
Return TRUE if there are no processes on a list, FALSE
otherwise, given the <i>q</i> index of the head of the list
in argument <i>head</i>. <b>lastkey</b> <br>
Return the key of the last process in a list given the
<i>q</i> index of the tail of the list in argument
<i>tail</i>. <b>nonempty</b> <br>
Return TRUE if there is at least one process on a list,
FALSE otherwise, given the <i>q</i> index of the head of the
list in argument <i>head</i>.</p>


<p style="margin-left:8%; margin-top: 1em"><b><small>BUGS</small></b>
<br>
Most of these routines do not check for valid arguments or
valid lists. Also, they assume interrupts are disabled when
called, and will corrupt the list structure if the caller
fails to disable interrupts.</p>

<p style="margin-left:8%; margin-top: 1em">Version 7
avr-Xinu Printed 12/28/2010 1</p>
<hr>
</body>
</html>
