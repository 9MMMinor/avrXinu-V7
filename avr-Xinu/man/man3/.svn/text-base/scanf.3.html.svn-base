<!-- Creator     : groff version 1.19.2 -->
<!-- CreationDate: Tue Dec 28 14:52:33 2010 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="Content-Style" content="text/css">
<style type="text/css">
       p     { margin-top: 0; margin-bottom: 0; }
       pre   { margin-top: 0; margin-bottom: 0; }
       table { margin-top: 0; margin-bottom: 0; }
</style>
<title></title>
</head>
<body>

<hr>


<p style="margin-top: 1em" valign="top">Printed 12/28/2010
1</p>

<p style="margin-top: 1em" valign="top">SCANF(3) Xinu
Programmer&rsquo;s Manual SCANF(3)</p>


<p style="margin-left:8%; margin-top: 1em"><b><small>NAME</small></b>
<br>
scanf, fscanf, sscanf &minus; formatted input conversion</p>


<p style="margin-left:8%; margin-top: 1em"><b><small>SYNOPSIS</small>
<br>
scanf(format</b> [ , pointer ] . . . <b>) <br>
char *format;</b></p>

<p style="margin-left:8%; margin-top: 1em"><b>fscanf(dev,
format</b> [ , pointer ] . . . <b>) <br>
int dev; <br>
char *format;</b></p>

<p style="margin-left:8%; margin-top: 1em"><b>sscanf(s,
format</b> [ , pointer ] . . . <b>) <br>
char *s, *format;</b></p>


<p style="margin-left:8%; margin-top: 1em"><b><small>DESCRIPTION</small></b>
<i><br>
Scanf</i> reads from the standard input device
<i>CONSOLE</i>. <i>Fscanf</i> reads from the named input
<i>device</i>. <i>Sscanf</i> reads from the character string
<i>s</i>. Each function reads characters, interprets them
according to a format, and stores the results in its
arguments. Each expects as arguments a control string
<i>format,</i> described below, and a set of <i>pointer</i>
arguments indicating where the converted input should be
stored.</p>

<p style="margin-left:8%; margin-top: 1em">The control
string usually contains conversion specifications, which are
used to direct interpretation of input sequences. The
control string may contain: 1.</p>

<p style="margin-left:14%;">Blanks, tabs or newlines, which
match optional white space in the input. 2.<br>
An ordinary character (not %) which must match the next
character of the input stream. 3.<br>
Conversion specifications, consisting of the character
<b>%</b>, an optional assignment suppressing character
<b>*</b>, an optional numerical maximum field width, and a
conversion character.</p>

<p style="margin-left:8%; margin-top: 1em">A conversion
specification directs the conversion of the next input
field; the result is placed in the variable pointed to by
the corresponding argument, unless assignment suppression
was indicated by <b>*</b>. An input field is defined as a
string of non-space characters; it extends to the next
inappropriate character or until the field width, if
specified, is exhausted.</p>

<p style="margin-left:8%; margin-top: 1em">The conversion
character indicates the interpretation of the input field;
the corresponding pointer argument must usually be of a
restricted type. The following conversion characters are
legal: <b>%</b></p>

<p style="margin-left:14%;">a single &lsquo;%&rsquo; is
expected in the input at this point; no assignment is done.
<b>d</b><br>
a decimal integer is expected; the corresponding argument
should be an integer pointer. <b>o</b><br>
an octal integer is expected; the corresponding argument
should be an integer pointer. <b>x</b><br>
a hexadecimal integer is expected; the corresponding
argument should be an integer pointer. <b>s</b><br>
a character string is expected; the corresponding argument
should be a character pointer pointing to an array of
characters large enough to accept the string and a
terminating &lsquo;\0&rsquo;, which will be added. The input
field is terminated by a space character or a newline.
<b>c</b><br>
a character is expected; the corresponding argument should
be a character pointer. The normal skip over space
characters is suppressed in this case; to read the next
non-space character, try &lsquo;%1s&rsquo;. If a field width
is given, the corresponding argument should refer to a
character array, and the indicated number of characters is
read. <b>e&nbsp;f</b><br>
a floating point number is expected; the next field is
converted accordingly and stored through the corresponding
argument, which should be a pointer to <i>float</i>. The
input format for floating point numbers is an optionally
signed string of digits possibly containing a decimal point,
followed by an optional exponent field consisting of an E or
e followed by an optionally signed integer. <b>[</b><br>
indicates a string not to be delimited by space characters.
The left bracket is followed by a set of characters and a
right bracket; the characters between the brackets define a
set of characters making up the string. If the first
character is not circumflex (^), the input field is all
characters until the first character not in the set between
the brackets; if the first character after the left bracket
is circumflex (^), the input field is all characters until
the first character which is in the remaining set of
characters between the brackets. The corresponding argument
must point to a character array.</p>

<p style="margin-left:8%; margin-top: 1em">The conversion
characters <b>d</b>, <b>o</b> and <b>x</b> may be
capitalized or preceded by <b>l</b> to indicate that a
pointer to <b>long</b> rather than to <b>int</b> is in the
argument list. Similarly, the conversion characters <b>e</b>
or <b>f</b> may be capitalized or preceded by <b>l</b> to
indicate a pointer to <b>double</b> rather than to
<b>float</b>. The conversion characters <b>d</b>, <b>o</b>
and <b>x</b> may be preceded by <b>h</b> to indicate a
pointer to <b>short</b> rather than to <b>int</b>.</p>

<p style="margin-left:8%; margin-top: 1em">The <i>scanf</i>
functions return the number of successfully matched and
assigned input items. This can be used to decide how many
input items were found. The constant <b>EOF</b> is returned
upon end of input; note that this is different from 0, which
means that no conversion was done; if conversion was
intended, it was frustrated by an inappropriate character in
the input.</p>

<p style="margin-left:8%; margin-top: 1em">For example, the
call</p>

<p style="margin-left:15%;">int i; float x; char name[50];
<br>
scanf(&quot;%d%f%s&quot;, &amp;i, &amp;x, name);</p>

<p style="margin-left:8%; margin-top: 1em">with the input
line</p>

<p style="margin-left:15%;">25 54.32E&minus;1 thompson</p>

<p style="margin-left:8%; margin-top: 1em">will assign to
<i>i</i> the value 25, <i>x</i> the value 5.432, and
<i>name</i> will contain <i>&lsquo;thompson\0&rsquo;</i>.
Or,</p>

<p style="margin-left:15%;">int i; float x; char name[50];
<br>
scanf(&quot;%2d%f%*d%[1234567890]&quot;, &amp;i, &amp;x,
name);</p>

<p style="margin-left:8%; margin-top: 1em">with input</p>

<p style="margin-left:15%;">56789 0123 56a72</p>

<p style="margin-left:8%; margin-top: 1em">will assign 56
to <i>i,</i> 789.0 to <i>x,</i> skip &lsquo;0123&rsquo;, and
place the string &lsquo;56\0&rsquo; in <i>name</i>. The next
call to <i>getchar</i> will return &lsquo;a&rsquo;.</p>

<p style="margin-left:8%; margin-top: 1em"><b><small>SEE
ALSO</small></b> <br>
getc(2), printf(3)</p>


<p style="margin-left:8%; margin-top: 1em"><b><small>DIAGNOSTICS</small></b>
<br>
The <i>scanf</i> functions return SYSERR on end of input,
and a short count for missing or illegal data items.</p>


<p style="margin-left:8%; margin-top: 1em"><b><small>BUGS</small></b>
<br>
The success of literal matches and suppressed assignments is
not directly determinable.</p>

<p style="margin-left:8%; margin-top: 1em">Version 7
avr-Xinu Printed 12/28/2010 1</p>
<hr>
</body>
</html>
