<!-- Creator     : groff version 1.19.2 -->
<!-- CreationDate: Tue Dec 28 14:52:32 2010 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="Content-Style" content="text/css">
<style type="text/css">
       p     { margin-top: 0; margin-bottom: 0; }
       pre   { margin-top: 0; margin-bottom: 0; }
       table { margin-top: 0; margin-bottom: 0; }
</style>
<title></title>
</head>
<body>

<hr>


<p style="margin-top: 1em" valign="top">Printed 12/28/2010
1</p>

<p style="margin-top: 1em" valign="top">PRINTF(3) Xinu
Programmer&rsquo;s Manual PRINTF(3)</p>


<p style="margin-left:8%; margin-top: 1em"><b><small>NAME</small></b>
<br>
printf, fprintf, sprintf &minus; formatted output
conversion</p>


<p style="margin-left:8%; margin-top: 1em"><b><small>SYNOPSIS</small>
<br>
printf(format</b> [<b>,</b> arg ] ... <b>) <br>
char *format;</b></p>

<p style="margin-left:8%; margin-top: 1em"><b>fprintf(dev,
format</b> [<b>,</b> arg ] ... <b>) <br>
int dev; <br>
char *format;</b></p>

<p style="margin-left:8%; margin-top: 1em"><b>sprintf(s,
format</b> [<b>,</b> arg ] ... <b>) <br>
char *s, format;</b></p>


<p style="margin-left:8%; margin-top: 1em"><b><small>DESCRIPTION</small></b>
<i><br>
Printf</i> writes formatted output on device <i>CONSOLE</i>.
<i>Fprintf</i> writes formatted output on the named output
<i>device</i>. <i>Sprintf</i> places formatted
&lsquo;output&rsquo; in the string <i>s,</i> followed by the
character &lsquo;\0&rsquo;.</p>

<p style="margin-left:8%; margin-top: 1em">Each of these
functions converts, formats, and prints its arguments after
the format under control of the format argument. The format
argument is a character string which contains two types of
objects: plain characters, which are simply copied to the
output stream, and conversion specifications, each of which
causes conversion and printing of the next successive
<i>arg</i>.</p>

<p style="margin-left:8%; margin-top: 1em">Each conversion
specification is introduced by the character <b>%</b>.
Following the <b>%</b>, there may be, in the following
order, &minus;</p>

<p style="margin-left:15%;">an optional minus sign
&lsquo;&minus;&rsquo; which specifies <i>left adjustment</i>
of the converted value in the indicated field; &minus;<br>
an optional digit string specifying a <i>field width;</i> if
the converted value has fewer characters than the field
width it will be blank-padded on the left (or right, if the
left-adjustment indicator has been given) to make up the
field width; if the field width begins with a zero,
zero-padding will be done instead of blank-padding;
&minus;<br>
an optional period &lsquo;<b>.</b>&rsquo; which serves to
separate the field width from the next digit string;
&minus;<br>
an optional digit string specifying a <i>precision</i> which
specifies the maximum number of characters to be printed
from a string; &minus;<br>
the character <b>l</b> specifying that a following <b>d</b>,
<b>o</b>, <b>x</b>, or <b>u</b> corresponds to a long
integer <i>arg.</i> (A capitalized conversion code
accomplishes the same thing.) &minus;<br>
a character which indicates the type of conversion to be
applied.</p>

<p style="margin-left:8%; margin-top: 1em">A field width or
precision may be &lsquo;*&rsquo; instead of a digit string.
In this case an integer <i>arg</i> supplies the field width
or precision.</p>

<p style="margin-left:8%; margin-top: 1em">The conversion
characters and their meanings are <b>dox</b></p>

<p style="margin-left:15%;">The integer <i>arg</i> is
converted to decimal, octal, or hexadecimal notation
respectively. <b>c</b><br>
The character <i>arg</i> is printed. Null characters are
ignored. <b>s</b><i><br>
Arg</i> is taken to be a string (character pointer) and
characters from the string are printed until a null
character or until the number of characters indicated by the
precision specification is reached; however if the precision
is 0 or missing all characters up to a null are printed.
<b>u</b><br>
The unsigned integer <i>arg</i> is converted to decimal and
printed (the result will be in the range 0 through 65535 on
the <small>LSI-11</small> for normal integers and 0 through
4294967295 for long integers). <b>%</b><br>
Print a &lsquo;%&rsquo;; no argument is converted.</p>

<p style="margin-left:8%; margin-top: 1em">In no case does
a non-existent or small field width cause truncation of a
field; padding takes place only if the specified field width
exceeds the actual width. Characters generated by
<i>printf</i> are printed by PUTC(2).</p>

<p style="margin-left:8%; margin-top: 1em"><b>Examples</b>
<br>
To print a date and time in the form &lsquo;Sunday, July 3,
10:02&rsquo;, where <i>weekday</i> and <i>month</i> are
pointers to null-terminated strings:</p>

<p style="margin-left:15%;">printf(&quot;%s, %s %d,
%02d:%02d&quot;, weekday, month, day, hour, min);</p>

<p style="margin-left:8%; margin-top: 1em"><b><small>SEE
ALSO</small></b> <br>
putc(2), scanf(3)</p>


<p style="margin-left:8%; margin-top: 1em"><b><small>BUGS</small></b>
<br>
Very wide fields (&gt;128 characters) fail.</p>

<p style="margin-left:8%; margin-top: 1em">Version 7
avr-Xinu Printed 12/28/2010 1</p>
<hr>
</body>
</html>
