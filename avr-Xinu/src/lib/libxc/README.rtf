{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red0\green0\blue241;\red100\green56\blue32;
\red28\green0\blue207;}
{\info
{\author Michael Minor}
{\*\copyright 2010}}\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 README  -- libxc\
\pard\tx560\pardeftab560\ql\qnatural\pardirnatural

\f1\fs22 \cf2 \CocoaLigature0 Copyright (c) 2011, Michael M Minor, Jan 27, 2011.
\f0\fs24 \cf0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\i \cf0 Libxc Stdio.h
\i0 \
This directory contains the standard i/o routines for Xinu.  It is a replacement for the stdio.h subset of the Standard C Library.  This subset includes most functions starting with 'f', fputc(), fgetc(), fopen(), etc, and the invaluable printf() and scanf() functions.  In addition, this directory replaces the definitions of stdin, stdout, and stderr. The central doprnt.c and doscan.c files contain functions modified from the original Xinu Library functions.  They do not support floating-point conversions.\
\

\i Libc Stdio.h
\i0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 The open source AVR Libc which is available from {\field{\*\fldinst{HYPERLINK "http://savannah.nongnu.org/projects/avr-libc/"}}{\fldrslt 
\f2 \cf3 \ul \ulc3 http://savannah.nongnu.org/projects/avr-libc/}} is used in this AVR version of Xinu.  In past versions of Xinu, a complete C Library was part of Xinu.  Already we have seen how it was necessary to replace memory allocation routines, malloc() and free(), with the Xinu functions (replacement with macros is not possible).  In order to use the Libc stdio.h, it is necessary to redefine stdin, stdout, and stderr, and make use of the user defined word, udata, in the stream data structure.  There are handy macros for doing all this, but considerable messiness.  Floating-point comes easily!\
\

\i April 17, 2011 Notes:\

\i0 Both versions of stdio.h are remarkably similar.  My objective is to use the avr-libc entirely.  At this point, Libxc and stdio.h use avr-libc's stdio.h definition of the FILE structure. We have added macros 
\i file_get_fdesc(stream)
\i0  and 
\i file_set_fdesc(stream,fd)
\i0 .  The only real problem that remains is the calling conventions for 
\i getc
\i0  and 
\i putc
\i0 .  What I would like to do is:\
\
In Xinu code:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\fs22 \cf4 \CocoaLigature0 #include <stdio.h>	// resolved from Xinu path\
...\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 \CocoaLigature1 In the Xinu include file:
\f1\fs22 \cf4 \CocoaLigature0 \
/* stdio.h -- this is the Xinu version in \{Xinu\}/src/sys/h */\
...\
#include "/usr/local/CrossPack-AVR/avr/include/stdio.h"\
#undef stdin\
#undef stdout\
#undef stderr\
\pard\tx560\pardeftab560\ql\qnatural\pardirnatural
\cf4 #define STDIN \cf5 0\cf4 \
#define STDOUT \cf5 1\cf4 \
#define STDERR \cf5 2\cf4  \
#define stdin  ((FILE *)(proctab[currpid].fildes[STDIN]))\
#define stdout ((FILE *)(proctab[currpid].fildes[STDOUT]))\
#define stderr ((FILE *)(proctab[currpid].fildes[STDERR]))\
\pard\tx560\pardeftab560\ql\qnatural\pardirnatural
\cf2 ...\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 The only way I can see to do this cleanly, is to rename the Xinu functions 
\i getc()
\i0  and 
\i putc()
\i0  and supply my own versions of
\i  fgetc()
\i0  and 
\i fputc()
\i0 , possibly as wrappered versions.\
\

\i April 21, 2011 Notes:\

\i0 Stdio.h is implemented as above.  No avr-libc functions are replaced except 
\i malloc()
\i0  and 
\i free()
\i0  and they are done as wrappered functions.   We have added macros 
\i file_get_fdesc(stream)
\i0  and 
\i file_set_fdesc(stream,fd)
\i0 .  The Xinu system calls  
\i getc()
\i0  and 
\i putc() 
\i0 have been renamed 
\i _getc()
\i0  and 
\i _putc()
\i0 .  
\i fopen()
\i0  and 
\i fclose()
\i0  functions have been added to Xinu; 
\i fdevopen()
\i0  should not be used with standard io.\
\
\

\i July 18, 2011 Notes:\

\i0 All this works just fine for
\i  fprintf() 
\i0 (and obviously 
\i vfprintf()
\i0 ), but 
\i printf()
\i0  precompiled in the stdio section of libc is clearly wrong having gotten its argument from the original definition of 
\i stdout
\i0 .  Yep, we need to replace 
\i printf()
\i0  and 
\i scanf() 
\i0 with identical (but recompiled) functions!  So, this is the way it stands:\
\
	\{Xinu\}/src/sys/sys/getc.c\
	\{Xinu\}/src/sys/sys/putc.c\
\
		The system calls for 
\i getc()
\i0  and 
\i putc()
\i0  are renamed 
\i _getc()
\i0  and 
\i _putc()
\i0 .  System calls 
\i Xinu_getc()
\i0  and 
\i Xinu_putc()
\i0  are added; they use a stream argument rather than a file descriptor argument.\
\
	\{Xinu\}/src/lib/libxc/fopen.c\
	\{Xinu\}/src/lib/libxc/fclose.c\
	\{Xinu\}/src/lib/libxc/printf.c\
	\{Xinu\}/src/lib/libxc/printf_p.c\
	\{Xinu\}/src/lib/libxc/scanf.c\
	\{Xinu\}/src/lib/libxc/scanf_p.c\
\
		Contain the files which fully implement stdio in Xinu and utilize avr-libc.  These files contain functions which replace avr-libc functions, but only 
\i fdevopen()
\i0  is wrappered.  Avr-libc functions 
\i fgetc()
\i0  and 
\i fputc()
\i0  work just fine, but 
\i getc()
\i0  and 
\i putc()
\i0  are replaced by macro calls.\
\
\
\
\
}